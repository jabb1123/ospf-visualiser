package org.hkfree.ospf.tools;

import java.awt.Color;
import java.awt.geom.Point2D;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.List;
import java.util.Map;

import org.hkfree.ospf.gui.mappanel.MapGraphComponent;
import org.hkfree.ospf.model.map.LinkEdge;
import org.hkfree.ospf.model.map.MapModel;
import org.hkfree.ospf.model.map.RouterVertex;
import org.hkfree.ospf.model.ospf.OspfLink;
import org.hkfree.ospf.model.ospf.OspfModel;
import org.hkfree.ospf.model.ospf.Router;

/**
 * Exporter pro export dat do souboru
 * @author Jan Schov√°nek
 */
public class Exporter {

    /**
     * Exportuje model do XGMML souboru vhodneho pro import do programu Cytoscape
     * @param file cilovy soubor
     * @param model model k exportu
     * @throws IOException
     */
    public static void exportModelToXGMML(File file, OspfModel model) throws IOException {
	Writer out = new BufferedWriter(new FileWriter(file));
	out.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>");
	out.write("\n");
	out.write("<graph label=\""
		+ model.getModelName()
		+ "\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:cy=\"http://www.cytoscape.org\" xmlns=\"http://www.cs.rpi.edu/XGMML\"  directed=\"1\">");
	out.write("\n");
	for (Router r : model.getRouters()) {
	    out.write("<node label=");
	    out.write("\"" + r.getRouterID() + "\"");
	    out.write(" id=");
	    out.write("\"" + r.getRouterID() + "\">");
	    out.write("<att name=\"NODE_TYPE\" value=\"DefaultNode\"/>");
	    out.write("<att name=\"ip\" value=\"" + r.getRouterID() + "\"/>");
	    out.write("<att name=\"name\" value=\"" + r.getRouterName() + "\"/>");
	    out.write("<graphics type=\"ELLIPSE\" h=\"40.0\" w=\"40.0\"/>");
	    out.write("</node>");
	    out.write("\n");
	}
	for (OspfLink ol : model.getOspfLinks()) {
	    out.write("<edge label=");
	    out.write("\"" + ol.getLinkID() + "\"");
	    out.write(" source=");
	    out.write("\"" + ol.getOspfLinkData().get(0).getRouter().getRouterID() + "\"");
	    out.write(" target=");
	    out.write("\"" + ol.getOspfLinkData().get(1).getRouter().getRouterID() + "\"");
	    out.write("></edge>");
	    out.write("\n");
	}
	out.write("</graph>");
	out.close();
    }
    
    
    /**
     * Export modelu do SVG formatu
     * @param file
     * @param model
     * @param graph
     * @throws IOException
     */
    public static void exportModelToSVG(File file, MapModel model, MapGraphComponent graph) throws IOException {
	Writer out = new BufferedWriter(new FileWriter(file));
	out.write("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n");
	out.write("<!-- \n    Generated by OspfVisualiser.\n\n    visit web: http://code.google.com/p/ospf-visualiser/ \n-->\n");
	Map<RouterVertex, Point2D> routers = graph.getRouterVertexPositions();
	List<LinkEdge> edges = model.getLinkEdges();
	for (LinkEdge le : edges) {
	    out.write("<line x1=\"" + routers.get(le.getRVertex1()).getX() + "\" " + 
		    "y1=\"" + routers.get(le.getRVertex1()).getY() + "\" " + 
		    "x2=\"" + routers.get(le.getRVertex2()).getX() + "\" " + 
		    "y2=\"" + routers.get(le.getRVertex2()).getY() + "\" " + 
		    "stroke=\"#"+Integer.toHexString(((Color)le.getLineColor(1)).getRGB()).substring(2)+"\" " +
		    "stroke-width=\"1\"/>\n");
	}
	for (RouterVertex rv : routers.keySet()) {
	    if (rv.isMultilink()) {
		//multilink
		out.write("<rect width=\"10\" height=\"10\" " +  
			"fill=\"#" + Integer.toHexString(rv.getColorFill().getRGB()).substring(2) + "\" " +
			"stroke=\"#000000\" " +
			"stroke-width=\"1\" " +
	    		"x=\"" + (routers.get(rv).getX()-5) + "\" " +
	    		"y=\"" + (routers.get(rv).getY()-5) + "\"/>\n");
	    } else {
		//router symbol
		out.write("<circle r=\"10\" " +
	    		"fill=\"#" + Integer.toHexString(rv.getColorFill().getRGB()).substring(2) + "\" " +
	    		"stroke=\"#"+ Integer.toHexString(rv.getColorStroke().getRGB()).substring(2) + "\" " +
	    		"stroke-width=\"1\" " +
	    		"cx=\"" + routers.get(rv).getX() + "\" " +
	    		"cy=\"" + routers.get(rv).getY() + "\"/>\n");
		//router text
		out.write("<text " +
			"x=\""+ routers.get(rv).getX() + "\" " +
			"y=\""+ routers.get(rv).getY() + "\" " +
			"fill=\"black\">"+rv.getName()+"</text>\n");
		
	    }
	}
	
	out.write("</svg>");
	out.close();
    }
}
